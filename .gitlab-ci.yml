image: docker:stable


services:
  - docker:dind


variables:
  # CONTAINER_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH
  # DOCKER_HOST: tcp://docker:2375
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_DRIVER: overlay2






.build: &docker_build
  stage: build
  script:
    - cd $DOCKERFILE_DIR
      # - docker pull $CONTAINER_IMAGE:$CONTAINER_TAG || true
      # - docker build --cache-from $CONTAINER_IMAGE:$CONTAINER_TAG --tag $CONTAINER_IMAGE:$CI_BUILD_REF --tag $CONTAINER_IMAGE:$CONTAINER_TAG .
    - CONTAINER_DATE_TAG="$CONTAINER_TAG-$(date +%Y%m%d)"
    - docker build --tag $CONTAINER_IMAGE:$CONTAINER_DATE_TAG --tag $CONTAINER_IMAGE:$CONTAINER_TAG .
    - docker push $CONTAINER_IMAGE:$CONTAINER_DATE_TAG
    - docker push $CONTAINER_IMAGE:$CONTAINER_TAG
  only:
    refs:
      - schedules
      - web
    kubernetes: active
  tags:
    - kubernetes-parity-build
  before_script:
    - test -z "$DOCKERIMAGE" && echo "DOCKERIMAGE must be defined" && exit 1
    - docker login -u $Docker_Hub_User_Parity -p $Docker_Hub_Pass_Parity
    - docker info
  after_script:
    - docker logout
  environment:
    name: parity-build




build:rust:nightly:
  <<: *docker_build
  variables:
    CONTAINER_IMAGE: parity/rust
    CONTAINER_TAG:   nightly
    DOCKERFILE_DIR:  docker-files-for-Gitlab-CI-rust/rustup
  only:
    variables:
      - $DOCKERIMAGE == "parity/rust"


build:rust-android:gitlab-ci:
  <<: *docker_build
  variables:
    CONTAINER_IMAGE: parity/rust-android
    CONTAINER_TAG:   gitlab-ci
    DOCKERFILE_DIR:  docker-files-for-Gitlab-CI-rust/cross/android
  only:
    variables:
      - $DOCKERIMAGE == "parity/rust-android"

build:substrate:nightly:
  <<: *docker_build
  variables:
    CONTAINER_IMAGE: parity/substrate
    CONTAINER_TAG:   nightly
    DOCKERFILE_DIR:  docker-files-for-Gitlab-CI-rust/substrate
  only:
    variables:
      - $DOCKERIMAGE == "parity/substrate"

build:awscli:
  <<: *docker_build
  variables:
    CONTAINER_IMAGE: parity/awscli
    CONTAINER_TAG:   latest
    DOCKERFILE_DIR:  awscli
  only:
    variables:
      - $DOCKERIMAGE == "parity/awscli"

build:tools:
  <<: *docker_build
  variables:
    CONTAINER_IMAGE: parity/tools
    CONTAINER_TAG:   latest
    DOCKERFILE_DIR:  tools
  only:
    variables:
      - $DOCKERIMAGE == "parity/tools"



# special case as version tags are introduced
build:kubetools:
  <<: *docker_build
  variables:
    CONTAINER_IMAGE:         parity/kubetools
    CONTAINER_TAG:           latest
    DOCKERFILE_DIR:          kubetools
    # https://github.com/kubernetes/kubernetes/releases
    KUBE_VERSION:            "1.13.4"
    # https://github.com/kubernetes/helm/releases
    HELM_VERSION:            "v2.13.1"
  only:
    variables:
      - $DOCKERIMAGE == "parity/kubetools"
  script:
    - cd $DOCKERFILE_DIR
    - docker build
      --build-arg VCS_REF="$(cut -c 1-7 ${CI_PROJECT_DIR}/.git/refs/heads/master)"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg KUBE_VERSION="${KUBE_VERSION}"
      --build-arg HELM_VERSION="${HELM_VERSION}"
      --tag $CONTAINER_IMAGE:$CONTAINER_TAG
      --tag $CONTAINER_IMAGE:$HELM_VERSION .
    - docker push $CONTAINER_IMAGE:$CONTAINER_TAG
    - docker push $CONTAINER_IMAGE:$HELM_VERSION



#
# polkadot:sync jobs are set up via gitlab schedule on this repo with the idea 
# to be notified when the chain isn't syncing properly on the latest build
#

.polkasync:                        &polkasync
  image:                           parity/kubetools:latest
  variables:
    RELEASES_URL:                  https://releases.parity.io/polkadot/x86_64-ubuntu:xenial
    KUBE_NAMESPACE:                polkasync
  before_script:
    # - VERSION="0.3.21-6bee107"
    - VERSION="$(wget -q -O - ${RELEASES_URL}/latest-v0.4/VERSION)"
    - echo "Polkadot version = ${VERSION}"
    - kubectl get ns "${KUBE_NAMESPACE}"
  only:
    refs:
      - schedules
      - web
    kubernetes: active
  tags:
    - kubernetes-parity-build
  environment:
    name: polkasync



polkadot:sync:start:
  <<:                              *polkasync
  only:
    variables:
      - $POLKASYNC == "start"
  script:
    - |
      sed -r "s;^([[:space:]]+image: +\"parity/polkadot):.*\"$;\1:${VERSION}\";" \
        polkasync/deployment.yaml | kubectl -n "${KUBE_NAMESPACE}" apply -f -



polkadot:sync:stop:
  <<:                              *polkasync
  only:
    variables:
      - $POLKASYNC == "stop"
  script:
    - |
      set -x
      PAYLOAD="{\"jsonrpc\":\"2.0\",\"method\":\"system_health\",\"params\":[],\"id\":0}"
      get_out () {
        kill %1 # stop port-forwarding
        kubectl -n "${KUBE_NAMESPACE}" delete -f polkasync/deployment.yaml
        case "$1" in
          (FAIL) echo "a check failed - alert somebody"; exit 1;;
          (*)    echo "chain seems to be synced well";;
        esac
      }

      kubectl -n ${KUBE_NAMESPACE} port-forward svc/polkasync-rpc 9933:9933 &
      sleep 2
      for n in 1 2 3 4; do
        curl --connect-timeout 10 -sS --data "${PAYLOAD}" \
          -H "Content-Type: application/json" \
          -X POST localhost:9933 -o out.json
        
        grep -q -e isSyncing -e peers out.json || get_out FAIL
        jq -e '.result.isSyncing == false' out.json || get_out FAIL
        jq -e '.result.peers > 2' out.json || get_out FAIL
        sleep 30
      done
      rm -f out.json
      get_out
      set +x



# vim: expandtab sts=2
